{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ChiToken",
          "name": "_chiToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "origin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sendToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sendAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "destination",
          "type": "address"
        }
      ],
      "name": "LogOneWay",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "origin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sendToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sendAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "destination",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiveToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "receiveAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "LogTwoWay",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_chiAmount",
          "type": "uint256"
        }
      ],
      "name": "action",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "chiToken",
      "outputs": [
        {
          "internalType": "contract ChiToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_chiAmount",
          "type": "uint256"
        }
      ],
      "name": "getActionData",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_actionData",
          "type": "bytes"
        },
        {
          "internalType": "enum DataFlow",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "termsOk",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "thisActionAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "receipt": {
    "to": null,
    "from": "0x394495a3800D1504b5686D398836BaEFEBd0C5B7",
    "contractAddress": "0xda73e97C8d61AAc1aF5606Fbe01E9893eD17EDa3",
    "transactionIndex": 181,
    "gasUsed": "631807",
    "logsBloom": "0x
    "blockHash": "0xc65d46da1d3cc3804ec353113d83af1ee32b43162e0ff96b5016712d3b2377f1",
    "transactionHash": "0x22290534f6de09a8fdd5994003f86164ed3d9d4d31d3bce216407c157fa74faa",
    "logs": [],
    "blockNumber": 10592295,
    "cumulativeGasUsed": "9290851",
    "status": 1,
    "byzantium": true
  },
  "address": "0xda73e97C8d61AAc1aF5606Fbe01E9893eD17EDa3",
  "args": [
    "0x0000000000004946c0e9f43f4dee607b0ef1fa1c"
  ],
  "solcInputHash": "0x1b7fad84695d8fd57abbb87c62fbfe593d1b375608c4bd967d8a392d3f9d2c9c",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ChiToken\",\"name\":\"_chiToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sendToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sendAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"LogOneWay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sendToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sendAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiveToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"receiveAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"LogTwoWay\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_chiAmount\",\"type\":\"uint256\"}],\"name\":\"action\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chiToken\",\"outputs\":[{\"internalType\":\"contract ChiToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_chiAmount\",\"type\":\"uint256\"}],\"name\":\"getActionData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_actionData\",\"type\":\"bytes\"},{\"internalType\":\"enum DataFlow\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"termsOk\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"thisActionAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Use in conjunction with selfProviderGasLimit Gelato Task config\",\"kind\":\"dev\",\"methods\":{\"action(address,uint256)\":{\"details\":\"Call ChaiToken.mint via UserProxy (Delegatecall)\"},\"getActionData(address,uint256)\":{\"details\":\"use this function to encode the data off-chain for the action data field\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"This action wraps around ChiToken.mint\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ActionChiMint.sol\":\"ActionChiMint\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@gelatonetwork/core/contracts/actions/GelatoActionsStandard.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: UNLICENSED\\\"\\npragma solidity ^0.6.10;\\n\\nimport {IGelatoAction} from \\\"./IGelatoAction.sol\\\";\\nimport {DataFlow} from \\\"../gelato_core/interfaces/IGelatoCore.sol\\\";\\n\\n/// @title GelatoActionsStandard\\n/// @dev find all the NatSpecs inside IGelatoAction\\nabstract contract GelatoActionsStandard is IGelatoAction {\\n\\n    string internal constant OK = \\\"OK\\\";\\n    address internal constant ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n    address public immutable thisActionAddress;\\n\\n    constructor() public { thisActionAddress = address(this); }\\n\\n    modifier delegatecallOnly(string memory _tracingInfo) {\\n        require(\\n            thisActionAddress != address(this),\\n            string(abi.encodePacked(_tracingInfo, \\\":delegatecallOnly\\\"))\\n        );\\n        _;\\n    }\\n\\n    function termsOk(\\n        uint256,  // _taskReceiptId\\n        address,  // _userProxy\\n        bytes calldata,  // _actionData\\n        DataFlow,\\n        uint256,  // _value: for actions that send ETH around\\n        uint256  // cycleId\\n    )\\n        external\\n        view\\n        virtual\\n        override\\n        returns(string memory)  // actionTermsOk\\n    {\\n        // Standard return value for actionConditions fulfilled and no erros:\\n        return OK;\\n    }\\n}\\n\",\"keccak256\":\"0xf42b686f5363ccecbe6f7594515380b40ad4ea4b6fb9b3ba30bad89f50095bf2\",\"license\":\"UNLICENSED\"},\"@gelatonetwork/core/contracts/actions/IGelatoAction.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: UNLICENSED\\\"\\npragma solidity ^0.6.10;\\n\\nimport {DataFlow} from \\\"../gelato_core/interfaces/IGelatoCore.sol\\\";\\n\\n/// @title IGelatoAction - solidity interface of GelatoActionsStandard\\n/// @notice all the APIs and events of GelatoActionsStandard\\n/// @dev all the APIs are implemented inside GelatoActionsStandard\\ninterface IGelatoAction {\\n    event LogOneWay(\\n        address origin,\\n        address sendToken,\\n        uint256 sendAmount,\\n        address destination\\n    );\\n\\n    event LogTwoWay(\\n        address origin,\\n        address sendToken,\\n        uint256 sendAmount,\\n        address destination,\\n        address receiveToken,\\n        uint256 receiveAmount,\\n        address receiver\\n    );\\n\\n    /// @notice Providers can use this for pre-execution sanity checks, to prevent reverts.\\n    /// @dev GelatoCore checks this in canExec and passes the parameters.\\n    /// @param _taskReceiptId The id of the task from which all arguments are passed.\\n    /// @param _userProxy The userProxy of the task. Often address(this) for delegatecalls.\\n    /// @param _actionData The encoded payload to be used in the Action.\\n    /// @param _dataFlow The dataFlow of the Action.\\n    /// @param _value A special param for ETH sending Actions. If the Action sends ETH\\n    ///  in its Action function implementation, one should expect msg.value therein to be\\n    ///  equal to _value. So Providers can check in termsOk that a valid ETH value will\\n    ///  be used because they also have access to the same value when encoding the\\n    ///  execPayload on their ProviderModule.\\n    /// @param _cycleId For tasks that are part of a Cycle.\\n    /// @return Returns OK, if Task can be executed safely according to the Provider's\\n    ///  terms laid out in this function implementation.\\n    function termsOk(\\n        uint256 _taskReceiptId,\\n        address _userProxy,\\n        bytes calldata _actionData,\\n        DataFlow _dataFlow,\\n        uint256 _value,\\n        uint256 _cycleId\\n    )\\n        external\\n        view\\n        returns(string memory);\\n}\\n\",\"keccak256\":\"0x2317c4f8be3253dad83d6b601b39819318c216792ec074798fea590c7ec016b0\",\"license\":\"UNLICENSED\"},\"@gelatonetwork/core/contracts/conditions/IGelatoCondition.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: UNLICENSED\\\"\\npragma solidity ^0.6.10;\\npragma experimental ABIEncoderV2;\\n\\n/// @title IGelatoCondition - solidity interface of GelatoConditionsStandard\\n/// @notice all the APIs of GelatoConditionsStandard\\n/// @dev all the APIs are implemented inside GelatoConditionsStandard\\ninterface IGelatoCondition {\\n\\n    /// @notice GelatoCore calls this to verify securely the specified Condition securely\\n    /// @dev Be careful only to encode a Task's condition.data as is and not with the\\n    ///  \\\"ok\\\" selector or _taskReceiptId, since those two things are handled by GelatoCore.\\n    /// @param _taskReceiptId This is passed by GelatoCore so we can rely on it as a secure\\n    ///  source of Task identification.\\n    /// @param _conditionData This is the Condition.data field developers must encode their\\n    ///  Condition's specific parameters in.\\n    /// @param _cycleId For Tasks that are executed as part of a cycle.\\n    function ok(uint256 _taskReceiptId, bytes calldata _conditionData, uint256 _cycleId)\\n        external\\n        view\\n        returns(string memory);\\n}\",\"keccak256\":\"0xd7cb47dc6a898e5f8934a7f4b908ef8bc29637d51d323ca9fb35484faaf5110f\",\"license\":\"UNLICENSED\"},\"@gelatonetwork/core/contracts/gelato_core/interfaces/IGelatoCore.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: UNLICENSED\\\"\\npragma solidity ^0.6.10;\\npragma experimental ABIEncoderV2;\\n\\nimport {IGelatoProviderModule} from \\\"../../provider_modules/IGelatoProviderModule.sol\\\";\\nimport {IGelatoCondition} from \\\"../../conditions/IGelatoCondition.sol\\\";\\n\\nstruct Provider {\\n    address addr;  //  if msg.sender == provider => self-Provider\\n    IGelatoProviderModule module;  //  can be IGelatoProviderModule(0) for self-Providers\\n}\\n\\nstruct Condition {\\n    IGelatoCondition inst;  // can be AddressZero for self-conditional Actions\\n    bytes data;  // can be bytes32(0) for self-conditional Actions\\n}\\n\\nenum Operation { Call, Delegatecall }\\n\\nenum DataFlow { None, In, Out, InAndOut }\\n\\nstruct Action {\\n    address addr;\\n    bytes data;\\n    Operation operation;\\n    DataFlow dataFlow;\\n    uint256 value;\\n    bool termsOkCheck;\\n}\\n\\nstruct Task {\\n    Condition[] conditions;  // optional\\n    Action[] actions;\\n    uint256 selfProviderGasLimit;  // optional: 0 defaults to gelatoMaxGas\\n    uint256 selfProviderGasPriceCeil;  // optional: 0 defaults to NO_CEIL\\n}\\n\\nstruct TaskReceipt {\\n    uint256 id;\\n    address userProxy;\\n    Provider provider;\\n    uint256 index;\\n    Task[] tasks;\\n    uint256 expiryDate;\\n    uint256 cycleId;  // auto-filled by GelatoCore. 0 for non-cyclic/chained tasks\\n    uint256 submissionsLeft;\\n}\\n\\ninterface IGelatoCore {\\n    event LogTaskSubmitted(\\n        uint256 indexed taskReceiptId,\\n        bytes32 indexed taskReceiptHash,\\n        TaskReceipt taskReceipt\\n    );\\n\\n    event LogExecSuccess(\\n        address indexed executor,\\n        uint256 indexed taskReceiptId,\\n        uint256 executorSuccessFee,\\n        uint256 sysAdminSuccessFee\\n    );\\n    event LogCanExecFailed(\\n        address indexed executor,\\n        uint256 indexed taskReceiptId,\\n        string reason\\n    );\\n    event LogExecReverted(\\n        address indexed executor,\\n        uint256 indexed taskReceiptId,\\n        uint256 executorRefund,\\n        string reason\\n    );\\n\\n    event LogTaskCancelled(uint256 indexed taskReceiptId, address indexed cancellor);\\n\\n    /// @notice API to query whether Task can be submitted successfully.\\n    /// @dev In submitTask the msg.sender must be the same as _userProxy here.\\n    /// @param _provider Gelato Provider object: provider address and module.\\n    /// @param _userProxy The userProxy from which the task will be submitted.\\n    /// @param _task Selected provider, conditions, actions, expiry date of the task\\n    function canSubmitTask(\\n        address _userProxy,\\n        Provider calldata _provider,\\n        Task calldata _task,\\n        uint256 _expiryDate\\n    )\\n        external\\n        view\\n        returns(string memory);\\n\\n    /// @notice API to submit a single Task.\\n    /// @dev You can let users submit multiple tasks at once by batching calls to this.\\n    /// @param _provider Gelato Provider object: provider address and module.\\n    /// @param _task A Gelato Task object: provider, conditions, actions.\\n    /// @param _expiryDate From then on the task cannot be executed. 0 for infinity.\\n    function submitTask(\\n        Provider calldata _provider,\\n        Task calldata _task,\\n        uint256 _expiryDate\\n    )\\n        external;\\n\\n\\n    /// @notice A Gelato Task Cycle consists of 1 or more Tasks that automatically submit\\n    ///  the next one, after they have been executed.\\n    /// @param _provider Gelato Provider object: provider address and module.\\n    /// @param _tasks This can be a single task or a sequence of tasks.\\n    /// @param _expiryDate  After this no task of the sequence can be executed any more.\\n    /// @param _cycles How many full cycles will be submitted\\n    function submitTaskCycle(\\n        Provider calldata _provider,\\n        Task[] calldata _tasks,\\n        uint256 _expiryDate,\\n        uint256 _cycles\\n    )\\n        external;\\n\\n\\n    /// @notice A Gelato Task Cycle consists of 1 or more Tasks that automatically submit\\n    ///  the next one, after they have been executed.\\n    /// @dev CAUTION: _sumOfRequestedTaskSubmits does not mean the number of cycles.\\n    /// @dev If _sumOfRequestedTaskSubmits = 1 && _tasks.length = 2, only the first task\\n    ///  would be submitted, but not the second\\n    /// @param _provider Gelato Provider object: provider address and module.\\n    /// @param _tasks This can be a single task or a sequence of tasks.\\n    /// @param _expiryDate  After this no task of the sequence can be executed any more.\\n    /// @param _sumOfRequestedTaskSubmits The TOTAL number of Task auto-submits\\n    ///  that should have occured once the cycle is complete:\\n    ///  _sumOfRequestedTaskSubmits = 0 => One Task will resubmit the next Task infinitly\\n    ///  _sumOfRequestedTaskSubmits = 1 => One Task will resubmit no other task\\n    ///  _sumOfRequestedTaskSubmits = 2 => One Task will resubmit 1 other task\\n    ///  ...\\n    function submitTaskChain(\\n        Provider calldata _provider,\\n        Task[] calldata _tasks,\\n        uint256 _expiryDate,\\n        uint256 _sumOfRequestedTaskSubmits\\n    )\\n        external;\\n\\n    // ================  Exec Suite =========================\\n    /// @notice Off-chain API for executors to check, if a TaskReceipt is executable\\n    /// @dev GelatoCore checks this during execution, in order to safeguard the Conditions\\n    /// @param _TR TaskReceipt, consisting of user task, user proxy address and id\\n    /// @param _gasLimit Task.selfProviderGasLimit is used for SelfProviders. All other\\n    ///  Providers must use gelatoMaxGas. If the _gasLimit is used by an Executor and the\\n    ///  tx reverts, a refund is paid by the Provider and the TaskReceipt is annulated.\\n    /// @param _execTxGasPrice Must be used by Executors. Gas Price fed by gelatoCore's\\n    ///  Gas Price Oracle. Executors can query the current gelatoGasPrice from events.\\n    function canExec(TaskReceipt calldata _TR, uint256 _gasLimit, uint256 _execTxGasPrice)\\n        external\\n        view\\n        returns(string memory);\\n\\n    /// @notice Executors call this when Conditions allow it to execute submitted Tasks.\\n    /// @dev Executors get rewarded for successful Execution. The Task remains open until\\n    ///   successfully executed, or when the execution failed, despite of gelatoMaxGas usage.\\n    ///   In the latter case Executors are refunded by the Task Provider.\\n    /// @param _TR TaskReceipt: id, userProxy, Task.\\n    function exec(TaskReceipt calldata _TR) external;\\n\\n    /// @notice Cancel task\\n    /// @dev Callable only by userProxy or selected provider\\n    /// @param _TR TaskReceipt: id, userProxy, Task.\\n    function cancelTask(TaskReceipt calldata _TR) external;\\n\\n    /// @notice Cancel multiple tasks at once\\n    /// @dev Callable only by userProxy or selected provider\\n    /// @param _taskReceipts TaskReceipts: id, userProxy, Task.\\n    function multiCancelTasks(TaskReceipt[] calldata _taskReceipts) external;\\n\\n    /// @notice Compute hash of task receipt\\n    /// @param _TR TaskReceipt, consisting of user task, user proxy address and id\\n    /// @return hash of taskReceipt\\n    function hashTaskReceipt(TaskReceipt calldata _TR) external pure returns(bytes32);\\n\\n    // ================  Getters =========================\\n    /// @notice Returns the taskReceiptId of the last TaskReceipt submitted\\n    /// @return currentId currentId, last TaskReceiptId submitted\\n    function currentTaskReceiptId() external view returns(uint256);\\n\\n    /// @notice Returns computed taskReceipt hash, used to check for taskReceipt validity\\n    /// @param _taskReceiptId Id of taskReceipt emitted in submission event\\n    /// @return hash of taskReceipt\\n    function taskReceiptHash(uint256 _taskReceiptId) external view returns(bytes32);\\n}\\n\",\"keccak256\":\"0xdaccff6137d5100b954e9c236f901d3d03c0e83796bc18cd57d4a46f6e8b2d5e\",\"license\":\"UNLICENSED\"},\"@gelatonetwork/core/contracts/libraries/GelatoBytes.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: UNLICENSED\\\"\\npragma solidity ^0.6.10;\\n\\nlibrary GelatoBytes {\\n    function calldataSliceSelector(bytes calldata _bytes)\\n        internal\\n        pure\\n        returns (bytes4 selector)\\n    {\\n        selector =\\n            _bytes[0] |\\n            (bytes4(_bytes[1]) >> 8) |\\n            (bytes4(_bytes[2]) >> 16) |\\n            (bytes4(_bytes[3]) >> 24);\\n    }\\n\\n    function memorySliceSelector(bytes memory _bytes)\\n        internal\\n        pure\\n        returns (bytes4 selector)\\n    {\\n        selector =\\n            _bytes[0] |\\n            (bytes4(_bytes[1]) >> 8) |\\n            (bytes4(_bytes[2]) >> 16) |\\n            (bytes4(_bytes[3]) >> 24);\\n    }\\n\\n    function revertWithErrorString(bytes memory _bytes, string memory _tracingInfo)\\n        internal\\n        pure\\n    {\\n        // 68: 32-location, 32-length, 4-ErrorSelector, UTF-8 err\\n        if (_bytes.length % 32 == 4) {\\n            bytes4 selector;\\n            assembly { selector := mload(add(0x20, _bytes)) }\\n            if (selector == 0x08c379a0) {  // Function selector for Error(string)\\n                assembly { _bytes := add(_bytes, 68) }\\n                revert(string(abi.encodePacked(_tracingInfo, string(_bytes))));\\n            } else {\\n                revert(string(abi.encodePacked(_tracingInfo, \\\"NoErrorSelector\\\")));\\n            }\\n        } else {\\n            revert(string(abi.encodePacked(_tracingInfo, \\\"UnexpectedReturndata\\\")));\\n        }\\n    }\\n}\",\"keccak256\":\"0xf771b45f4569c758d07b095a7ba3a6e275b15e3f669997695f548e72f3bb09cf\",\"license\":\"UNLICENSED\"},\"@gelatonetwork/core/contracts/provider_modules/IGelatoProviderModule.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: UNLICENSED\\\"\\npragma solidity ^0.6.10;\\npragma experimental ABIEncoderV2;\\n\\nimport {Action, Task} from \\\"../gelato_core/interfaces/IGelatoCore.sol\\\";\\n\\ninterface IGelatoProviderModule {\\n\\n    /// @notice Check if provider agrees to pay for inputted task receipt\\n    /// @dev Enables arbitrary checks by provider\\n    /// @param _userProxy The smart contract account of the user who submitted the Task.\\n    /// @param _provider The account of the Provider who uses the ProviderModule.\\n    /// @param _task Gelato Task to be executed.\\n    /// @return \\\"OK\\\" if provider agrees\\n    function isProvided(address _userProxy, address _provider, Task calldata _task)\\n        external\\n        view\\n        returns(string memory);\\n\\n    /// @notice Convert action specific payload into proxy specific payload\\n    /// @dev Encoded multiple actions into a multisend\\n    /// @param _taskReceiptId Unique ID of Gelato Task to be executed.\\n    /// @param _userProxy The smart contract account of the user who submitted the Task.\\n    /// @param _provider The account of the Provider who uses the ProviderModule.\\n    /// @param _task Gelato Task to be executed.\\n    /// @param _cycleId For Tasks that form part of a cycle/chain.\\n    /// @return Encoded payload that will be used for low-level .call on user proxy\\n    /// @return checkReturndata if true, fwd returndata from userProxy.call to ProviderModule\\n    function execPayload(\\n        uint256 _taskReceiptId,\\n        address _userProxy,\\n        address _provider,\\n        Task calldata _task,\\n        uint256 _cycleId\\n    )\\n        external\\n        view\\n        returns(bytes memory, bool checkReturndata);\\n\\n    /// @notice Called by GelatoCore.exec to verifiy that no revert happend on userProxy\\n    /// @dev If a caught revert is detected, this fn should revert with the detected error\\n    /// @param _proxyReturndata Data from GelatoCore._exec.userProxy.call(execPayload)\\n    function execRevertCheck(bytes calldata _proxyReturndata) external pure;\\n}\\n\",\"keccak256\":\"0x7e5b43174b2ebe041a6ca60d4c6670e8be27601bc31fa06ca4ec37b25aa06400\",\"license\":\"UNLICENSED\"},\"@openzeppelin/contracts/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\",\"keccak256\":\"0x6c234834003dfb86e2c23d12dfdde7cc01e78013d71b52162cb308b4873562cb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x9a9cf02622cd7a64261b10534fc3260449da25c98c9e96d1b4ae8110a20e5806\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5c26b39d26f7ed489e555d955dcd3e01872972e71fdd1528e93ec164e4f23385\",\"license\":\"MIT\"},\"contracts/ActionChiMint.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: UNLICENSED\\\"\\npragma solidity ^0.6.10;\\npragma experimental ABIEncoderV2;\\n\\nimport {\\n    GelatoActionsStandard\\n} from \\\"@gelatonetwork/core/contracts/actions/GelatoActionsStandard.sol\\\";\\nimport {ChiToken} from \\\"./ChiToken.sol\\\";\\nimport {\\n    DataFlow\\n} from \\\"@gelatonetwork/core/contracts/gelato_core/interfaces/IGelatoCore.sol\\\";\\nimport {GelatoBytes} from \\\"@gelatonetwork/core/contracts/libraries/GelatoBytes.sol\\\";\\n\\n/// @notice This action wraps around ChiToken.mint\\n/// @dev Use in conjunction with selfProviderGasLimit Gelato Task config\\ncontract ActionChiMint is GelatoActionsStandard {\\n\\n    ChiToken public immutable chiToken;\\n    constructor(ChiToken _chiToken) public { chiToken = _chiToken; }\\n\\n    // ======= DEV HELPERS =========\\n    /// @dev use this function to encode the data off-chain for the action data field\\n    function getActionData(address _recipient, uint256 _chiAmount)\\n        public\\n        pure\\n        virtual\\n        returns(bytes memory)\\n    {\\n        if (_chiAmount > 140)\\n            revert(\\\"ActionChiMint.getActionData: max 140 CHI\\\");\\n        return abi.encodeWithSelector(this.action.selector, _recipient, _chiAmount);\\n    }\\n\\n    // ======= ACTION IMPLEMENTATION DETAILS =========\\n    /// @dev Call ChaiToken.mint via UserProxy (Delegatecall)\\n    function action(address _recipient, uint256 _chiAmount)\\n        public\\n        virtual\\n        delegatecallOnly(\\\"ActionChiMint.action\\\")\\n    {\\n        try chiToken.mint(_chiAmount) {\\n        } catch Error(string memory error) {\\n            revert(string(abi.encodePacked(\\\"ActionChiMint.action.mint:\\\", error)));\\n        } catch {\\n            revert(\\\"ActionChiMint.action.mint: unknown error\\\");\\n        }\\n\\n        try chiToken.transfer(_recipient, _chiAmount) returns (bool success) {\\n            require(success, \\\"ActionChiMint.action.transfer: unsuccessful\\\");\\n        } catch Error(string memory error) {\\n            revert(string(abi.encodePacked(\\\"ActionChiMint.action.transfer:\\\", error)));\\n        } catch {\\n            revert(\\\"ActionChiMint.action.transfer: unknown error\\\");\\n        }\\n    }\\n\\n    // ===== ACTION TERMS CHECK ========\\n    // Make sure\\n    function termsOk(\\n        uint256,  // taskReceipId\\n        address,  // _userProxy\\n        bytes calldata _actionData,\\n        DataFlow,\\n        uint256,  // value\\n        uint256  // cycleId\\n    )\\n        public\\n        view\\n        virtual\\n        override\\n        returns(string memory)\\n    {\\n        if (this.action.selector != GelatoBytes.calldataSliceSelector(_actionData))\\n            return \\\"ActionChiMint: invalid action selector\\\";\\n\\n        uint256 _chiAmount = abi.decode(_actionData[36:68], (uint256));\\n\\n        // We want to restrict to 140 CHI minted max per TX\\n        // https://medium.com/@1inch.exchange/1inch-introduces-chi-gastoken-d0bd5bb0f92b\\n        if (_chiAmount > 140 || _chiAmount == 0)\\n            return \\\"ActionChiMint: invalid chi amount\\\";\\n\\n        // STANDARD return string to signal actionConditions Ok\\n        return OK;\\n    }\\n}\\n\",\"keccak256\":\"0x286a2f1bef591c4c7fdd66c6e1cd34debf7c38aa7cd8728297acc278e2593c0d\",\"license\":\"UNLICENSED\"},\"contracts/ChiToken.sol\":{\"content\":\"// Source: https://github.com/CryptoManiacsZone/chi/blob/master/contracts/ChiToken.sol\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n\\nabstract contract ERC20WithoutTotalSupply is IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping(address => uint256) private _balances;\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function allowance(address owner, address spender) public view override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\\n        _transfer(msg.sender, recipient, amount);\\n        return true;\\n    }\\n\\n    function approve(address spender, uint256 amount) public override returns (bool) {\\n        _approve(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        uint256 allowed = _allowances[sender][msg.sender];\\n        if ((allowed >> 255) == 0) {\\n            _approve(sender, msg.sender, allowed.sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        }\\n        return true;\\n    }\\n\\n    function _transfer(address sender, address recipient, uint256 amount) internal {\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    function _approve(address owner, address spender, uint256 amount) internal {\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    function _mint(address account, uint256 amount) internal {\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    function _burn(address account, uint256 amount) internal {\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    function _burnFrom(address account, uint256 amount) internal {\\n        _burn(account, amount);\\n        uint256 allowed = _allowances[account][msg.sender];\\n        if ((allowed >> 255) == 0) {\\n            _approve(account, msg.sender, allowed.sub(amount, \\\"ERC20: burn amount exceeds allowance\\\"));\\n        }\\n    }\\n}\\n\\n\\ncontract ChiToken is IERC20, ERC20WithoutTotalSupply {\\n    string constant public name = \\\"Chi Token by 1inch\\\";\\n    string constant public symbol = \\\"CHI\\\";\\n    uint8 constant public decimals = 0;\\n\\n    uint256 public totalMinted;\\n    uint256 public totalBurned;\\n\\n    function totalSupply() public view override returns(uint256) {\\n        return totalMinted - totalBurned;\\n    }\\n\\n    function mint(uint256 value) public {\\n        uint256 offset = totalMinted;\\n        assembly {\\n            mstore(0, 0x746d4946c0e9F43F4Dee607b0eF1fA1c3318585733ff6000526015600bf30000)\\n\\n            for {let i := div(value, 32)} i {i := sub(i, 1)} {\\n                pop(create2(0, 0, 30, add(offset, 0))) pop(create2(0, 0, 30, add(offset, 1)))\\n                pop(create2(0, 0, 30, add(offset, 2))) pop(create2(0, 0, 30, add(offset, 3)))\\n                pop(create2(0, 0, 30, add(offset, 4))) pop(create2(0, 0, 30, add(offset, 5)))\\n                pop(create2(0, 0, 30, add(offset, 6))) pop(create2(0, 0, 30, add(offset, 7)))\\n                pop(create2(0, 0, 30, add(offset, 8))) pop(create2(0, 0, 30, add(offset, 9)))\\n                pop(create2(0, 0, 30, add(offset, 10))) pop(create2(0, 0, 30, add(offset, 11)))\\n                pop(create2(0, 0, 30, add(offset, 12))) pop(create2(0, 0, 30, add(offset, 13)))\\n                pop(create2(0, 0, 30, add(offset, 14))) pop(create2(0, 0, 30, add(offset, 15)))\\n                pop(create2(0, 0, 30, add(offset, 16))) pop(create2(0, 0, 30, add(offset, 17)))\\n                pop(create2(0, 0, 30, add(offset, 18))) pop(create2(0, 0, 30, add(offset, 19)))\\n                pop(create2(0, 0, 30, add(offset, 20))) pop(create2(0, 0, 30, add(offset, 21)))\\n                pop(create2(0, 0, 30, add(offset, 22))) pop(create2(0, 0, 30, add(offset, 23)))\\n                pop(create2(0, 0, 30, add(offset, 24))) pop(create2(0, 0, 30, add(offset, 25)))\\n                pop(create2(0, 0, 30, add(offset, 26))) pop(create2(0, 0, 30, add(offset, 27)))\\n                pop(create2(0, 0, 30, add(offset, 28))) pop(create2(0, 0, 30, add(offset, 29)))\\n                pop(create2(0, 0, 30, add(offset, 30))) pop(create2(0, 0, 30, add(offset, 31)))\\n                offset := add(offset, 32)\\n            }\\n\\n            for {let i := and(value, 0x1F)} i {i := sub(i, 1)} {\\n                pop(create2(0, 0, 30, offset))\\n                offset := add(offset, 1)\\n            }\\n        }\\n\\n        _mint(msg.sender, value);\\n        totalMinted = offset;\\n    }\\n\\n    function computeAddress2(uint256 salt) public pure returns (address child) {\\n        assembly {\\n            let data := mload(0x40)\\n            mstore(data, 0xff0000000000004946c0e9F43F4Dee607b0eF1fA1c0000000000000000000000)\\n            mstore(add(data, 21), salt)\\n            mstore(add(data, 53), 0x3c1644c68e5d6cb380c36d1bf847fdbc0c7ac28030025a2fc5e63cce23c16348)\\n            child := and(keccak256(data, 85), 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\\n        }\\n    }\\n\\n    function _destroyChildren(uint256 value) internal {\\n        assembly {\\n            let i := sload(totalBurned_slot)\\n            let end := add(i, value)\\n            sstore(totalBurned_slot, end)\\n\\n            let data := mload(0x40)\\n            mstore(data, 0xff0000000000004946c0e9F43F4Dee607b0eF1fA1c0000000000000000000000)\\n            mstore(add(data, 53), 0x3c1644c68e5d6cb380c36d1bf847fdbc0c7ac28030025a2fc5e63cce23c16348)\\n            let ptr := add(data, 21)\\n            for { } lt(i, end) { i := add(i, 1) } {\\n                mstore(ptr, i)\\n                pop(call(gas(), keccak256(data, 85), 0, 0, 0, 0, 0))\\n            }\\n        }\\n    }\\n\\n    function free(uint256 value) public returns (uint256)  {\\n        if (value > 0) {\\n            _burn(msg.sender, value);\\n            _destroyChildren(value);\\n        }\\n        return value;\\n    }\\n\\n    function freeUpTo(uint256 value) public returns (uint256) {\\n        return free(Math.min(value, balanceOf(msg.sender)));\\n    }\\n\\n    function freeFrom(address from, uint256 value) public returns (uint256) {\\n        if (value > 0) {\\n            _burnFrom(from, value);\\n            _destroyChildren(value);\\n        }\\n        return value;\\n    }\\n\\n    function freeFromUpTo(address from, uint256 value) public returns (uint256) {\\n        return freeFrom(from, Math.min(Math.min(value, balanceOf(from)), allowance(from, msg.sender)));\\n    }\\n}\",\"keccak256\":\"0x61df3236ae1f9e55ab6da39f1d3f55ea44c8d83838c71fee9a4ca8847d6dbf5b\"}},\"version\":1}",
  "bytecode": "0x60c060405234801561001057600080fd5b50604051610b22380380610b2283398101604081905261002f9161004b565b30606090811b6080521b6001600160601b03191660a052610079565b60006020828403121561005c578081fd5b81516001600160a01b0381168114610072578182fd5b9392505050565b60805160601c60a05160601c610a726100b06000398060cc52806101b0528061028d52508061012752806103ed5250610a726000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80630c0511351461005c5780632ee610a51461007a5780633406a78c1461008f5780637b9b9348146100af578063eb9e7126146100b7575b600080fd5b6100646100ca565b6040516100719190610785565b60405180910390f35b61008d610088366004610583565b6100ee565b005b6100a261009d366004610583565b610371565b60405161007191906107b2565b6100646103eb565b6100a26100c53660046105ec565b61040f565b7f000000000000000000000000000000000000000000000000000000000000000081565b6040518060400160405280601481526020017320b1ba34b7b721b434a6b4b73a1730b1ba34b7b760611b815250306001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614158160405160200161016291906106c6565b604051602081830303815290604052906101985760405162461bcd60e51b815260040161018f91906107b2565b60405180910390fd5b5060405163140e25ad60e31b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a0712d68906101e59085906004016108ec565b600060405180830381600087803b1580156101ff57600080fd5b505af1925050508015610210575060015b6102765761021c61094f565b80610227575061025e565b8060405160200161023891906106fb565b60408051601f198184030181529082905262461bcd60e51b825261018f916004016107b2565b60405162461bcd60e51b815260040161018f90610811565b60405163a9059cbb60e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906102c49086908690600401610799565b602060405180830381600087803b1580156102de57600080fd5b505af192505050801561030e575060408051601f3d908101601f1916820190925261030b918101906105ad565b60015b61034e5761031a61094f565b806103255750610336565b806040516020016102389190610740565b60405162461bcd60e51b815260040161018f906107c5565b8061036b5760405162461bcd60e51b815260040161018f906108a1565b50505050565b6060608c8211156103945760405162461bcd60e51b815260040161018f90610859565b604051632ee610a560e01b906103b09085908590602401610799565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915290505b92915050565b7f000000000000000000000000000000000000000000000000000000000000000081565b606061041b86866104cb565b6001600160e01b031916632ee610a560e01b1461045257604051806060016040528060268152602001610a176026913990506104c0565b600061046260446024888a6108f5565b81019061046f91906105d4565b9050608c81118061047e575080155b156104a4576040518060600160405280602181526020016109f6602191399150506104c0565b50506040805180820190915260028152614f4b60f01b60208201525b979650505050505050565b60006018838360038181106104dc57fe5b909101356001600160f81b03191690911c90506010848460028181106104fe57fe5b909101356001600160f81b03191690911c905060088585600181811061052057fe5b909101356001600160f81b03191690911c9050858560008161053e57fe5b9050013560f81c60f81b6001600160f81b031916171717905092915050565b80356001600160a01b03811681146103e557600080fd5b8035600481106103e557600080fd5b60008060408385031215610595578182fd5b61059f848461055d565b946020939093013593505050565b6000602082840312156105be578081fd5b815180151581146105cd578182fd5b9392505050565b6000602082840312156105e5578081fd5b5035919050565b600080600080600080600060c0888a031215610606578283fd5b873596506106178960208a0161055d565b9550604088013567ffffffffffffffff80821115610633578485fd5b818a0191508a601f830112610646578485fd5b813581811115610654578586fd5b8b6020828501011115610665578586fd5b60208301975080965050505061067e8960608a01610574565b92506080880135915060a0880135905092959891949750929550565b600081518084526106b281602086016020860161091d565b601f01601f19169290920160200192915050565b600082516106d881846020870161091d565b703a64656c656761746563616c6c4f6e6c7960781b920191825250601101919050565b60007f416374696f6e4368694d696e742e616374696f6e2e6d696e743a0000000000008252825161073381601a85016020870161091d565b91909101601a0192915050565b60007f416374696f6e4368694d696e742e616374696f6e2e7472616e736665723a00008252825161077881601e85016020870161091d565b91909101601e0192915050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6000602082526105cd602083018461069a565b6020808252602c908201527f416374696f6e4368694d696e742e616374696f6e2e7472616e736665723a207560408201526b3735b737bbb71032b93937b960a11b606082015260800190565b60208082526028908201527f416374696f6e4368694d696e742e616374696f6e2e6d696e743a20756e6b6e6f6040820152673bb71032b93937b960c11b606082015260800190565b60208082526028908201527f416374696f6e4368694d696e742e676574416374696f6e446174613a206d6178604082015267203134302043484960c01b606082015260800190565b6020808252602b908201527f416374696f6e4368694d696e742e616374696f6e2e7472616e736665723a207560408201526a1b9cdd58d8d95cdcd99d5b60aa1b606082015260800190565b90815260200190565b60008085851115610904578182fd5b83861115610910578182fd5b5050820193919092039150565b60005b83811015610938578181015183820152602001610920565b8381111561036b5750506000910152565b60e01c90565b600060443d101561095f576109f2565b600481823e6308c379a06109738251610949565b1461097d576109f2565b6040513d600319016004823e80513d67ffffffffffffffff81602484011181841117156109ad57505050506109f2565b828401925082519150808211156109c757505050506109f2565b503d830160208284010111156109df575050506109f2565b601f01601f191681016020016040529150505b9056fe416374696f6e4368694d696e743a20696e76616c69642063686920616d6f756e74416374696f6e4368694d696e743a20696e76616c696420616374696f6e2073656c6563746f72a264697066735822122032acecf332dd67b7f2f53494e0de42bf3e7c2e54a99c5bdc223377e287ece22864736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100575760003560e01c80630c0511351461005c5780632ee610a51461007a5780633406a78c1461008f5780637b9b9348146100af578063eb9e7126146100b7575b600080fd5b6100646100ca565b6040516100719190610785565b60405180910390f35b61008d610088366004610583565b6100ee565b005b6100a261009d366004610583565b610371565b60405161007191906107b2565b6100646103eb565b6100a26100c53660046105ec565b61040f565b7f000000000000000000000000000000000000000000000000000000000000000081565b6040518060400160405280601481526020017320b1ba34b7b721b434a6b4b73a1730b1ba34b7b760611b815250306001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614158160405160200161016291906106c6565b604051602081830303815290604052906101985760405162461bcd60e51b815260040161018f91906107b2565b60405180910390fd5b5060405163140e25ad60e31b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a0712d68906101e59085906004016108ec565b600060405180830381600087803b1580156101ff57600080fd5b505af1925050508015610210575060015b6102765761021c61094f565b80610227575061025e565b8060405160200161023891906106fb565b60408051601f198184030181529082905262461bcd60e51b825261018f916004016107b2565b60405162461bcd60e51b815260040161018f90610811565b60405163a9059cbb60e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906102c49086908690600401610799565b602060405180830381600087803b1580156102de57600080fd5b505af192505050801561030e575060408051601f3d908101601f1916820190925261030b918101906105ad565b60015b61034e5761031a61094f565b806103255750610336565b806040516020016102389190610740565b60405162461bcd60e51b815260040161018f906107c5565b8061036b5760405162461bcd60e51b815260040161018f906108a1565b50505050565b6060608c8211156103945760405162461bcd60e51b815260040161018f90610859565b604051632ee610a560e01b906103b09085908590602401610799565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915290505b92915050565b7f000000000000000000000000000000000000000000000000000000000000000081565b606061041b86866104cb565b6001600160e01b031916632ee610a560e01b1461045257604051806060016040528060268152602001610a176026913990506104c0565b600061046260446024888a6108f5565b81019061046f91906105d4565b9050608c81118061047e575080155b156104a4576040518060600160405280602181526020016109f6602191399150506104c0565b50506040805180820190915260028152614f4b60f01b60208201525b979650505050505050565b60006018838360038181106104dc57fe5b909101356001600160f81b03191690911c90506010848460028181106104fe57fe5b909101356001600160f81b03191690911c905060088585600181811061052057fe5b909101356001600160f81b03191690911c9050858560008161053e57fe5b9050013560f81c60f81b6001600160f81b031916171717905092915050565b80356001600160a01b03811681146103e557600080fd5b8035600481106103e557600080fd5b60008060408385031215610595578182fd5b61059f848461055d565b946020939093013593505050565b6000602082840312156105be578081fd5b815180151581146105cd578182fd5b9392505050565b6000602082840312156105e5578081fd5b5035919050565b600080600080600080600060c0888a031215610606578283fd5b873596506106178960208a0161055d565b9550604088013567ffffffffffffffff80821115610633578485fd5b818a0191508a601f830112610646578485fd5b813581811115610654578586fd5b8b6020828501011115610665578586fd5b60208301975080965050505061067e8960608a01610574565b92506080880135915060a0880135905092959891949750929550565b600081518084526106b281602086016020860161091d565b601f01601f19169290920160200192915050565b600082516106d881846020870161091d565b703a64656c656761746563616c6c4f6e6c7960781b920191825250601101919050565b60007f416374696f6e4368694d696e742e616374696f6e2e6d696e743a0000000000008252825161073381601a85016020870161091d565b91909101601a0192915050565b60007f416374696f6e4368694d696e742e616374696f6e2e7472616e736665723a00008252825161077881601e85016020870161091d565b91909101601e0192915050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6000602082526105cd602083018461069a565b6020808252602c908201527f416374696f6e4368694d696e742e616374696f6e2e7472616e736665723a207560408201526b3735b737bbb71032b93937b960a11b606082015260800190565b60208082526028908201527f416374696f6e4368694d696e742e616374696f6e2e6d696e743a20756e6b6e6f6040820152673bb71032b93937b960c11b606082015260800190565b60208082526028908201527f416374696f6e4368694d696e742e676574416374696f6e446174613a206d6178604082015267203134302043484960c01b606082015260800190565b6020808252602b908201527f416374696f6e4368694d696e742e616374696f6e2e7472616e736665723a207560408201526a1b9cdd58d8d95cdcd99d5b60aa1b606082015260800190565b90815260200190565b60008085851115610904578182fd5b83861115610910578182fd5b5050820193919092039150565b60005b83811015610938578181015183820152602001610920565b8381111561036b5750506000910152565b60e01c90565b600060443d101561095f576109f2565b600481823e6308c379a06109738251610949565b1461097d576109f2565b6040513d600319016004823e80513d67ffffffffffffffff81602484011181841117156109ad57505050506109f2565b828401925082519150808211156109c757505050506109f2565b503d830160208284010111156109df575050506109f2565b601f01601f191681016020016040529150505b9056fe416374696f6e4368694d696e743a20696e76616c69642063686920616d6f756e74416374696f6e4368694d696e743a20696e76616c696420616374696f6e2073656c6563746f72a264697066735822122032acecf332dd67b7f2f53494e0de42bf3e7c2e54a99c5bdc223377e287ece22864736f6c634300060c0033",
  "devdoc": {
    "details": "Use in conjunction with selfProviderGasLimit Gelato Task config",
    "kind": "dev",
    "methods": {
      "action(address,uint256)": {
        "details": "Call ChaiToken.mint via UserProxy (Delegatecall)"
      },
      "getActionData(address,uint256)": {
        "details": "use this function to encode the data off-chain for the action data field"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "This action wraps around ChiToken.mint",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  },
  "gasEstimates": {
    "creation": {
      "codeDepositCost": "534800",
      "executionCost": "infinite",
      "totalCost": "infinite"
    },
    "external": {
      "action(address,uint256)": "infinite",
      "chiToken()": "infinite",
      "getActionData(address,uint256)": "infinite",
      "termsOk(uint256,address,bytes,uint8,uint256,uint256)": "infinite",
      "thisActionAddress()": "infinite"
    }
  }
}